{"version":3,"sources":["components/dashboard/Rename.js","components/dashboard/Delete.js","components/dashboard/DropDown.js","components/Navbar.js","components/Calendar.js","components/CalendarHeader.js","components/dashboard/AddNew.js","components/dashboard/Dashboard.js","App.js","index.js"],"names":["Rename","props","useState","nameInput","setNameInput","descriptionInput","setDescriptionInput","showError","setShowError","useEffect","current_task","name","description","className","style","visibility","htmlFor","id","type","value","onChange","e","target","placeholder","autoComplete","required","onClick","closeWindow","length","updateTask","setTimeout","setShowSettings","Delete","deleteTask","DropDown","rename","setRename","setDeleteTask","Fragment","today","Date","year","getFullYear","month","getMonth","dayOfMonth","getDate","markDay","Navbar","showSettings","position","dashboardVisible","setDashboardVisibility","Calendar","months","longDays","shorDays","areDaysLong","state","daysOfWeek","window","innerWidth","blankDays","totalDaysInMonth","num_days","currdate","prevdate","bind","getCurrentMonthAndYear","updateMarkedDays","date","this","setState","getBlankDays","getTotalDaysInMonth","addEventListener","prevProps","getTime","uat","calendarDate","calendarYear","calendarMonth","map","day","index","getDays","gridColumn","isMarked","includes","toString","isToday","onContextMenu","preventDefault","monthAlpha","toLowerCase","currTask","dates","num_day","getAttribute","setDate","getDay","days","i","push","React","Component","CalendarHeader","monthAndYear","currentTask","setCurrentTask","showDescription","setShowDescription","marginLeft","fontSize","onMouseEnter","onMouseLeave","currDate","changeDate","prevMonth","nextMonth","AddNew","noInputError","setNoInputError","closeDialog","addTask","Dashboard","showAddNewBox","showAddNewDialogBox","selectTask","taskMarked","transform","taskCount","finished","total","padding","tasklist","task","close","allMonths","forEach","App","displayDate","calendar_data","tasks","addNewTaskToState","updateLocalStorage","getCurrentTask","alphasort","countFinish","localData","JSON","parse","localStorage","getItem","prevState","arr","newArr","stringify","sort","a","b","num","toLocaleLowerCase","filter","data","setItem","title","toAdd","uuidv4","dataStorage","toUpdate","newTask","allTasks","taskToMarkOrig","taskToMark","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c71add1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst Rename = (props) => {\n    const [nameInput, setNameInput] = useState(\"\")\n    const [descriptionInput, setDescriptionInput] = useState(\"\")\n    const [showError, setShowError] = useState(false);\n\n    useEffect(() => {\n        setNameInput(props.current_task.name)\n        setDescriptionInput(props.current_task.description)\n\n    }, [props])\n\n    return (\n        <div className=\"translucent-background\">\n            <div className=\"rename-task-box\">\n                <div className=\"form\">\n                    <p className=\"form-title\">Rename</p>\n                    <p className=\"error-msg\"\n                        style={{visibility: showError ? \"visible\" : \"hidden\"}}>Title can't be empty</p>\n                    <label className=\"form-label-text\" htmlFor=\"rename-task-title\">Title: </label>\n                    <input className=\"form-input\" \n                            id=\"rename-task-title\"\n                            type=\"text\" value={nameInput} \n                            onChange={(e) => setNameInput(e.target.value)} \n                            placeholder=\"Enter task name..\" \n                            autoComplete=\"off\"\n                            required /> \n\n                    <label className=\"form-label-text\" htmlFor=\"add-task-description\">Description: </label>\n                    <input className=\"form-input\" \n                            id=\"add-task-description\"\n                            type=\"text\" value={descriptionInput} \n                            onChange={(e) => setDescriptionInput(e.target.value)} \n                            placeholder=\"Optional\"\n                            autoComplete=\"off\" />\n                            \n                    <div className=\"buttons\">\n                        <button className=\"btn-gn\" onClick={closeWindow}><i className=\"fas fa-times\"></i></button>\n                        <button className=\"btn-gn\" onClick={updateTask} ><i className=\"fas fa-check\"></i></button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n\n    function updateTask() {\n        if(nameInput.length > 0) {\n            props.updateTask(props.current_task.id, nameInput, descriptionInput);\n            closeWindow();\n        }\n        else {\n            setShowError(true);\n            setTimeout(() => {\n                setShowError(false);\n            }, 1500);\n        }\n    }\n\n    function closeWindow() {\n        props.setShowSettings(false);\n    }\n}\n\nexport default Rename\n","import React from 'react'\n\nconst Delete = (props) => {\n    return (\n        <div className=\"translucent-background\">\n            <div className=\"form form-sm\">\n                <p className=\"form-title m-b\">Are you sure to delete ?</p>\n                <div className=\"buttons\">\n                    <button className=\"btn-gn\" onClick={closeWindow}><i className=\"fas fa-times\"></i></button>\n                    <button className=\"btn-gn\" onClick={deleteTask}><i className=\"fas fa-check\"></i></button>\n                </div>\n            </div>\n        </div>\n    )\n\n    function deleteTask() {\n        props.deleteTask(props.current_task.id);\n        closeWindow();\n    }\n\n    function closeWindow() {\n        props.setShowSettings(false);\n    }\n}\n\nexport default Delete\n","import React, {useState} from 'react'\nimport Rename from './Rename'\nimport Delete from './Delete';\n\nconst DropDown = (props) => {\n    const [rename, setRename] = useState(false);\n    const [deleteTask, setDeleteTask] = useState(false);\n\n    return (\n        <React.Fragment>\n            <div className=\"drop-down-menu\">\n                <button onClick={() => {setRename(!rename)}}>Rename</button>\n                <button onClick={() => {setDeleteTask(!deleteTask)}}>Delete</button>\n                <button onClick={markToday}>Mark Today</button>\n            </div>\n\n            {rename && <Rename current_task={props.current_task}\n                                updateTask={props.updateTask}\n                                setShowSettings={props.setShowSettings}/>}\n                            \n            {deleteTask && <Delete current_task={props.current_task}\n                                    deleteTask={props.deleteTask}\n                                    setShowSettings={props.setShowSettings}/>}\n\n        </React.Fragment>\n    )\n\n    function markToday() {\n        let today = new Date();\n        let year = today.getFullYear();\n        let month = today.getMonth();\n        let dayOfMonth = today.getDate();\n\n        props.markDay(year, month, dayOfMonth);\n        props.setShowSettings(false)\n    }\n}\n\nexport default DropDown","import React from 'react'\nimport { useState } from 'react'\nimport DropDown from './dashboard/DropDown'\n\nconst Navbar = (props) => {\n    const [showSettings, setShowSettings] = useState(false)\n\n    return (\n        <React.Fragment>\n            <nav className=\"main-navbar\" style={{position: \"relative\"}}>\n                <button className=\"button-md rotate-btn\"\n                        style={{visibility: props.dashboardVisible ? \"hidden\" : \"visible\"}}\n                        onClick={() => props.setDashboardVisibility(true)}><i className=\"fas fa-bars\"></i></button>\n                <button className=\"button-md rotate-btn\" onClick={() => {setShowSettings(!showSettings)}}>\n                    <i className=\"fas fa-cog\"></i>\n                </button>\n            </nav>\n            {showSettings && <DropDown  setShowSettings={setShowSettings}\n                                        current_task={props.current_task}\n                                        updateTask={props.updateTask}\n                                        deleteTask={props.deleteTask}\n                                        markDay={props.markDay}/>}\n        </React.Fragment>\n        \n    )\n}\n\nexport default Navbar\n","import React from 'react'\n\nclass Calendar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        this.longDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n        this.shorDays = ['Sun', 'Mon', 'Tue', 'Wed',' Thu', 'Fri', 'Sat'];\n        this.areDaysLong = true;\n\n        this.state = {\n            daysOfWeek: window.innerWidth > 600 ? this.longDays : this.shorDays,\n            blankDays: 0,\n            totalDaysInMonth: 0,\n            num_days: []\n        }\n\n        this.currdate = null\n        this.prevdate = null;\n\n        this.markDay = this.markDay.bind(this)\n        this.getCurrentMonthAndYear = this.getCurrentMonthAndYear.bind(this)\n        this.updateMarkedDays = this.updateMarkedDays.bind(this)\n    }\n\n    componentDidMount() {\n        const date = this.props.date;\n\n        this.setState({\n            blankDays: this.getBlankDays(date),\n            totalDaysInMonth: this.getTotalDaysInMonth(date)\n        })\n\n        this.currdate = date;\n\n        this.updateMarkedDays()\n\n        window.addEventListener(\"resize\", () => {\n            if(window.innerWidth < 600 && this.areDaysLong) {\n                this.setState({daysOfWeek: this.shorDays});\n                this.areDaysLong = false;\n            }\n            else if(window.innerWidth > 600 && !this.areDaysLong) {\n                this.setState({daysOfWeek: this.longDays});\n                this.areDaysLong = true;\n            }\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n        this.prevdate = this.currdate;\n        this.currdate = this.props.date;\n\n        if(this.prevdate && (this.prevdate.getTime() !== this.currdate.getTime())) {\n            const date = this.props.date;\n    \n            this.setState({\n                blankDays: this.getBlankDays(date),\n                totalDaysInMonth: this.getTotalDaysInMonth(date)\n            })\n        }\n\n        if((prevProps.current_task.id !== this.props.current_task.id) ||\n                    (prevProps.current_task.uat !== this.props.current_task.uat) ||\n                    (prevProps.date !== this.props.date))\n            this.updateMarkedDays()\n    }\n\n    render() {\n        const calendarDate = new Date(this.props.date);\n        const today = new Date();\n        const [year, month, dayOfMonth] = [today.getFullYear(), today.getMonth(), today.getDate()];\n        const [calendarYear, calendarMonth] = [calendarDate.getFullYear(), calendarDate.getMonth()]\n\n        return (\n            <div className=\"cal-grid-container\">\n                {this.state.daysOfWeek.map((day, index) => {\n                    return <div key={index}>{day}</div>\n                })}\n    \n                {\n                    this.getDays(this.state.totalDaysInMonth).map((day) => {\n                        const style = day === 1 ? {gridColumn: `${this.state.blankDays} / ${this.state.blankDays+1}`} : {};\n                        const isMarked = this.state.num_days.includes(day.toString()) ? \"calendar-date-marked\" : \"\";\n                        const isToday = (year === calendarYear && month === calendarMonth && day === dayOfMonth) ? \"calendar-today\" : \"\";\n                        \n                        return <div style={style}\n                                     key={day} \n                                     data-date={day}\n                                     className={`calendar-tile ${isMarked} ${isToday}`}\n                                     onContextMenu={(e) => e.preventDefault()} >{day}</div>;\n                    })\n                }\n            </div>\n        )\n    }\n\n    updateMarkedDays() {\n        const [month, year] = this.getCurrentMonthAndYear();\n        const monthAlpha = this.months[month].toLowerCase();\n        const currTask = this.props.current_task.dates;\n\n        let num_days = [];\n        if(currTask[year] && currTask[year][monthAlpha]) {\n            num_days = currTask[year][monthAlpha];\n        }\n\n        this.setState({\n            num_days\n        });\n    }\n\n    markDay(e) {\n        e.preventDefault()\n        \n        let num_day = e.target.getAttribute('data-date');\n        let [month, year] = this.getCurrentMonthAndYear();\n        \n        this.props.markDay(year, month, num_day)\n    }\n    \n    getCurrentMonthAndYear() {\n        let date = new Date(this.props.date);\n        let month = date.getMonth();\n        let year = date.getFullYear();\n        return [month, year];\n    }\n\n    getBlankDays(date) {\n        date.setDate(1);\n        return date.getDay() + 1;\n    }\n    \n    getTotalDaysInMonth(date) {\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n    \n        const newDate = new Date(year, month, 0);\n        return newDate.getDate();\n    }\n\n    getDays(totalDaysInMonth) {\n        let days = [];\n        \n        for(let i=1; i<=totalDaysInMonth; i++) {\n            days.push(i);\n        }\n    \n        return days;\n    }\n}\n\nexport default Calendar\n","import React, { useState, useEffect } from 'react'\n\nconst CalendarHeader = (props) => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const monthAndYear = props.date && months[props.date.getMonth()] + \" \" + props.date.getFullYear();\n    \n    const [currentTask, setCurrentTask] = useState(props.current_task)\n    const [showDescription, setShowDescription] = useState(false)\n\n    useEffect(() => {\n        setCurrentTask(props.current_task)\n\n    }, [props.current_task])\n\n    return (\n        <div>\n            <div className=\"calendar-title\">{\n                currentTask.name    \n            }\n                <i className=\"fas fa-question-circle\" style={{marginLeft: \"0.8em\", fontSize: \"0.6em\"}} \n                    onMouseEnter={() => {setShowDescription(true)}}\n                    onMouseLeave={() => {setShowDescription(false)}}></i>\n\n                {showDescription && <p className=\"sm-tooltip\">{currentTask.description}</p>}\n            </div>\n            <div className=\"secondary-navbar\">\n                <button className=\"button-md\" onClick={() => prevMonth(props.date, props.changeDate)}>\n                <i className=\"fas fa-chevron-left\"></i>\n                </button>\n\n                <span>{monthAndYear}</span>\n\n                <button className=\"button-md\" onClick={() => nextMonth(props.date, props.changeDate)}>\n                <i className=\"fas fa-chevron-right\"></i>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nfunction prevMonth(currDate, changeDate) {\n    let year = currDate.getFullYear(),\n        month = currDate.getMonth(),\n        day = currDate.getDate();\n\n    if(month <= 0) {\n        year--;\n        month = 11;\n    }\n    else {\n        month--;\n    }\n\n    changeDate(new Date(year, month, day));\n}\n\nfunction nextMonth(currDate, changeDate) {\n    let year = currDate.getFullYear(),\n        month = currDate.getMonth(),\n        day = currDate.getDate();\n\n    if(month >= 11) {\n        year++;\n        month = 0;\n    }\n    else {\n        month++;\n    }\n\n    changeDate(new Date(year, month, day));\n}\n\nexport default CalendarHeader\n","import React, { useState } from 'react'\n\nconst AddNew = (props) => {\n    const [nameInput, setNameInput] = useState(\"\")\n    const [descriptionInput, setDescriptionInput] = useState(\"\")\n    const [noInputError, setNoInputError] = useState(false)\n\n    return (\n        <div className=\"add-new-form\">\n            <p  className=\"error-msg\"\n                style={{visibility: noInputError ? \"visible\" : \"hidden\"}}>name mustn't be empty</p>\n\n            <label className=\"form-label-text\" htmlFor=\"add-task-title\">Title: </label>\n            <input className=\"form-input\" \n                    id=\"add-task-title\"\n                    type=\"text\" value={nameInput} \n                    onChange={(e) => setNameInput(e.target.value)} \n                    placeholder=\"Enter task name..\"\n                    autoComplete=\"off\" /> \n\n            <label className=\"form-label-text\" htmlFor=\"add-task-description\">Description: </label>\n            <input className=\"form-input\" \n                    id=\"add-task-description\"\n                    type=\"text\" value={descriptionInput} \n                    onChange={(e) => setDescriptionInput(e.target.value)} \n                    placeholder=\"Optional\"\n                    autoComplete=\"off\" />\n                       \n            <div>\n                <button className=\"btn-gn\" style={{fontSize: \"1.3em\"}} onClick={props.closeDialog}><i className=\"fas fa-times\"></i></button>\n                <button className=\"btn-gn\" style={{fontSize: \"1.3em\"}} onClick={addTask}><i className=\"fas fa-check\"></i></button>\n            </div>\n        </div>\n    )\n\n    function addTask() {\n        if(nameInput) {\n            props.addTask(nameInput, descriptionInput)\n            setNameInput(\"\")\n            props.closeDialog()\n            props.setDashboardVisibility(false);\n        }\n        else {\n            setNoInputError(true)\n\n            setTimeout(() => {\n                setNoInputError(false)\n            }, 1400);\n        }\n    }\n}\n\nexport default AddNew\n","import React from 'react'\nimport AddNew from './AddNew'\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            showAddNewBox: false,\n            current_task: null\n        }\n\n        this.showAddNewDialogBox = this.showAddNewDialogBox.bind(this)\n        this.selectTask = this.selectTask.bind(this)\n        this.taskMarked = this.taskMarked.bind(this)\n    }\n\n    componentDidUpdate() {\n        if(this.state.current_task !== this.props.current_task)\n            this.setState({\n                current_task: this.props.current_task\n            })\n    }\n\n    selectTask(e) {        \n        this.props.setCurrentTask(e.target.getAttribute(\"data-key\"));\n        this.props.setDashboardVisibility(false);\n    }\n\n    render() {\n        return (\n            <div className=\"dashboard\" style={{transform: this.props.dashboardVisible ? \"translateX(0)\" : \"translateX(-105%)\"}}>\n                <button className=\"btn-gn dashboard-close-btn\"\n                        onClick={() => {\n                            this.props.setDashboardVisibility(false);\n                            this.showAddNewDialogBox(true);\n                            }} \n                        ><i className=\"fas fa-times\"></i></button>\n\n                <p className=\"dashboard-title\">Tasks \n                    <span id=\"taskcount-info\">{this.props.taskCount.finished} / {this.props.taskCount.total}</span>\n                </p>\n\n                <button className=\"btn-dashboard create-new-btn\"\n                        onClick={() => {this.showAddNewDialogBox(false)}}>Create new</button>\n\n\n                {this.state.showAddNewBox && <AddNew closeDialog={this.showAddNewDialogBox}\n                                                     addTask={this.props.addTask}\n                                                     setDashboardVisibility={this.props.setDashboardVisibility}/>}\n\n                <span className=\"horizontal-break\"></span>\n\n                <ul style={{padding: \"0.6em\", marginLeft: \"1.5em\"}}>\n                    {\n                        this.props.tasklist.map(task => {\n                            return <li key={task.id}\n                                        className={\"task-list-item\" \n                                                    + (this.state.current_task === task.id ? \" task-selected\" : \"\")\n                                                    + (this.taskMarked(task))\n                                                }\n                                        data-key={task.id}\n                                        onClick={this.selectTask} >{task.name}</li>\n                        })\n                    }\n                </ul>\n            </div>\n        )\n    }\n\n    showAddNewDialogBox(close) {\n        this.setState((state) => ({\n            showAddNewBox: close ? false : !state.showAddNewBox\n        }))\n    }\n\n    taskMarked(task) {\n        let date = new Date();\n\n        let [year, month, dayOfMonth] = [date.getFullYear(), date.getMonth(), date.getDate()];\n        [year, month, dayOfMonth] = [year.toString(), month.toString(), dayOfMonth.toString()]\n        let allMonths = [...this.props.allMonths];\n        allMonths.forEach((month, i) => {\n            allMonths[i] = month.toLowerCase();\n        });\n\n        if(task.dates[year] \n            && task.dates[year][allMonths[month]] \n            && task.dates[year][allMonths[month]].includes(dayOfMonth)) {\n                return \" task-marked\";\n            }\n        return \"\";\n    }\n}\n\nexport default Dashboard\n","import React from 'react';\nimport {v4 as uuidv4} from \"uuid\"\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Calendar from './components/Calendar';\nimport CalendarHeader from './components/CalendarHeader';\nimport Dashboard from './components/dashboard/Dashboard';\n\n\n/*\n=============================BUGS=====================================================\n\n======================================================================================\n*/\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      displayDate: new Date(),\n      calendar_data: {\n        tasks: []\n      },\n      current_task: null,\n      dashboardVisible: false,\n      finished: 0,\n      total: 0\n    }\n\n    this.months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n    this.changeDate = this.changeDate.bind(this)\n    this.addNewTaskToState = this.addNewTaskToState.bind(this)\n    this.setDashboardVisibility = this.setDashboardVisibility.bind(this)\n    this.setCurrentTask = this.setCurrentTask.bind(this)\n    this.updateLocalStorage = this.updateLocalStorage.bind(this)\n    this.markDay = this.markDay.bind(this)\n    this.getCurrentTask = this.getCurrentTask.bind(this)\n    this.updateTask = this.updateTask.bind(this)\n    this.deleteTask = this.deleteTask.bind(this)\n    this.alphasort = this.alphasort.bind(this)\n    this.countFinish = this.countFinish.bind(this)\n  }\n\n  componentDidMount() {\n    let localData = JSON.parse(localStorage.getItem(\"calendar-data\"));\n\n    if(localData) {\n      this.setState({\n        calendar_data: {\n          tasks: localData.tasks\n        },\n        current_task: localData.currTask || ( localData.tasks.length && localData.tasks[0].id ),\n        total: localData.tasks.length\n      })\n    }\n    else {\n      let dataStorage = {\n        tasks: [],\n        currTask: null\n      }\n\n      this.updateLocalStorage(dataStorage);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const finished = this.countFinish();\n\n    if(prevState.finished != finished) {\n      this.setState({finished})\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar dashboardVisible={this.state.dashboardVisible}\n                setDashboardVisibility={this.setDashboardVisibility}\n                current_task={this.getCurrentTask()}\n                updateTask={this.updateTask} \n                deleteTask={this.deleteTask}\n                markDay={this.markDay} />\n\n        <Dashboard addTask={this.addNewTaskToState}\n                   tasklist={this.alphasort(this.state.calendar_data.tasks)} \n                   current_task={this.state.current_task}\n                   dashboardVisible={this.state.dashboardVisible}\n                   setDashboardVisibility={this.setDashboardVisibility}\n                   setCurrentTask={this.setCurrentTask}\n                   allMonths={this.months}\n                   taskCount={{finished: this.state.finished,\n                                total: this.state.total}} />\n\n        {this.state.current_task ? <CalendarHeader date={this.state.displayDate} \n                                                    changeDate={this.changeDate} \n                                                    current_task={this.getCurrentTask()}/> : null}\n        \n        {this.state.current_task ? <Calendar date={this.state.displayDate}\n                                              current_task={this.getCurrentTask()}\n                                              markDay={this.markDay}/> : null}\n        \n      </React.Fragment>  \n    )\n  }\n\n  alphasort(arr) {\n    let newArr = JSON.parse(JSON.stringify(arr));\n    newArr.sort((a, b) => {\n      a = a.name.toLowerCase();\n      b = b.name.toLowerCase();\n\n      if(a < b) return -1;\n      if(a > b) return 1;\n      return 0;\n    })\n    return newArr;\n  }\n\n  countFinish() {\n    let num = 0;\n    let today = new Date();\n    let [year, month, dayOfMonth] = [today.getFullYear(), today.getMonth(), today.getDate()];\n\n    this.state.calendar_data.tasks.forEach(task => {\n      try {\n        if(task.dates[year][this.months[month].toLocaleLowerCase()].includes(dayOfMonth.toString())) {\n          num++;\n        }\n      }\n      catch {\n      }\n    })\n\n    return num;\n  }\n\n  getCurrentTask() {\n    return this.state.calendar_data.tasks.filter(task => {\n      return task.id === this.state.current_task\n    })[0]\n  }\n\n  updateLocalStorage(data) {\n    localStorage.setItem(\"calendar-data\", JSON.stringify(data));\n  }\n\n  changeDate(date) {\n    this.setState({\n      displayDate: date\n    })\n  }\n\n  addNewTaskToState(title, description) {\n    let toAdd = {\n      id: uuidv4(),\n      name: title,\n      description: description,\n      uat: new Date(),\n      dates: {}\n    }\n\n    this.setState(state => ({\n      calendar_data: {\n        tasks: [...state.calendar_data.tasks, toAdd], \n      },\n      current_task: toAdd.id,\n      //dashboardVisible: false\n    }), () => {\n\n      let dataStorage = {\n        tasks: this.state.calendar_data.tasks,\n        currTask: this.state.current_task\n      }\n\n      this.updateLocalStorage(dataStorage);\n    })\n  }\n\n  updateTask(id, name, description) {\n    const toUpdate = this.state.calendar_data.tasks.filter(task => {\n      return task.id === id\n    })[0];\n\n    const newTask = JSON.parse(JSON.stringify(toUpdate));\n    newTask.name = name;\n    newTask.description = description;\n\n    const allTasks = this.state.calendar_data.tasks.filter(task => {\n      return task.id !== id\n    });\n\n    allTasks.push(newTask);\n\n    this.setState({\n      calendar_data: {\n        tasks: allTasks\n      }\n    }, () => {\n      this.updateLocalStorage({\n        tasks: this.state.calendar_data.tasks,\n        currTask: this.state.current_task\n      })\n    })\n  }\n\n  deleteTask(id) {\n    const allTasks = this.state.calendar_data.tasks.filter(task => {\n      return task.id !== id\n    });\n\n    this.setState({\n      calendar_data: {\n        tasks: allTasks\n      },\n      current_task: allTasks.length > 0 ? allTasks[0].id : null \n    }, () => {\n      this.updateLocalStorage({\n        tasks: this.state.calendar_data.tasks,\n        currTask: this.state.current_task\n      })\n    })\n  }\n\n  setDashboardVisibility(value) {\n    this.setState({\n      dashboardVisible: value\n    })\n  }\n\n  setCurrentTask(task) {\n    this.setState({\n      current_task: task\n    }, () => {\n      \n      let dataStorage = {\n        tasks: this.state.calendar_data.tasks,\n        currTask: this.state.current_task\n      }\n\n      this.updateLocalStorage(dataStorage);\n\n    })\n  }\n\n  markDay(year, month, num_day) {\n    year = year.toString();\n    month = month.toString();\n    num_day = num_day.toString();\n\n    let monthAlpha = this.months[month].toLowerCase();\n    let taskToMarkOrig = this.state.calendar_data.tasks.filter(task => {\n      return task.id === this.state.current_task\n    })[0]\n\n    let taskToMark = JSON.parse(JSON.stringify(taskToMarkOrig));\n\n    if(!taskToMark.dates[year]) \n      taskToMark.dates[year] = {};\n    if(!taskToMark.dates[year][monthAlpha]) \n      taskToMark.dates[year][monthAlpha] = []\n    if(!taskToMark.dates[year][monthAlpha].includes(num_day))\n      taskToMark.dates[year][monthAlpha].push(num_day);\n    else {\n      let months = [];\n      taskToMark.dates[year][monthAlpha].forEach(day => {\n        if(day !== num_day)\n          months.push(day);\n      }) \n\n      taskToMark.dates[year][monthAlpha] = months;\n    }\n\n    let allTasks = this.state.calendar_data.tasks.filter(task => {\n      return task.id !== this.state.current_task\n    });\n\n    taskToMark.uat = new Date();\n\n    allTasks.push(taskToMark);\n\n    this.setState({\n      calendar_data: {\n        tasks: allTasks\n      }\n    }, () => {\n\n      this.updateLocalStorage({\n        tasks: this.state.calendar_data.tasks,\n        currTask: this.state.current_task\n      })\n\n    })\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}